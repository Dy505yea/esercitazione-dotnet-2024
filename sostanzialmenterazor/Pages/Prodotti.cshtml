@page
@model ProdottiModel
<style>
    /*
    .item1 {
        grid-area: header;
    }
    .item3 {
        grid-area: main;
    }

    .item4 {
        grid-area: right;
    }

    .grid-container {
        display: grid;
        grid-template-areas:
            'main right ';
        gap: 10px;
        background-color: #2196F3;
        padding: 10px;
    }

    .container {
        width: 100%;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: repeat(auto-fill, 120px);
        grid-row-gap: .5em;
        grid-column-gap: 1em;
    }

    .grid-container>div {
        background-color: rgba(255, 255, 255, 0.8);
        text-align: center;
        padding: 20px 0;
        font-size: 30px;
    }
    .grid-container>.item3, .grid-container>.item4 {
        background-color: rgba(255, 255, 255, 1);
    }
    .item3, .item4{
        font-weight: bolder;
    }
    */
    .confirm {
        background-color: white;
    }
    * {
  box-sizing: border-box;
}

body {
  font: 16px Arial;  
}

/*the container must be positioned relative:*/
.autocomplete {
  position: relative;
  display: inline-block;
}

input {
  border: 1px solid transparent;
  background-color: #f1f1f1;
  padding: 10px;
  font-size: 16px;
}

input[type=text] {
  background-color: #f1f1f1;
  width: 100%;
}

input[type=submit] {
  background-color: DodgerBlue;
  color: #fff;
  cursor: pointer;
}

.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the autocomplete items to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
}

.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff; 
  border-bottom: 1px solid #d4d4d4; 
}

/*when hovering an item:*/
.autocomplete-items div:hover {
  background-color: #e9e9e9; 
}

/*when navigating through the items using the arrow keys:*/
.autocomplete-active {
  background-color: DodgerBlue !important; 
  color: #ffffff; 
}
</style>
@{
    ViewData["Title"] = "Prodotti";
}
<h1>@ViewData["Title"]</h1>


<h2>Prova di autocompletamento</h2>
<p>Start typing:</p>

<!--Make sure the form has the autocomplete function switched off:-->
<form autocomplete="off" action="/action_page.php">
  <div class="autocomplete" style="width:300px;">
    <input id="myInput" type="text" name="myCountry" placeholder="Country">
  </div>
  <input type="submit">
</form>
<script>
function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
          b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }
  /*execute a function when someone clicks in the document:*/
  document.addEventListener("click", function (e) {
      closeAllLists(e.target);
  });
}

/*An array containing all the country names in the world:*/
var countries = ["Afghanistan","Albania","Algeria","Andorra","Angola","Anguilla","Antigua & Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Bosnia & Herzegovina","Botswana","Brazil","British Virgin Islands","Brunei","Bulgaria","Burkina Faso","Burundi","Cambodia","Cameroon","Canada","Cape Verde","Cayman Islands","Central Arfrican Republic","Chad","Chile","China","Colombia","Congo","Cook Islands","Costa Rica","Cote D Ivoire","Croatia","Cuba","Curacao","Cyprus","Czech Republic","Denmark","Djibouti","Dominica","Dominican Republic","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Ethiopia","Falkland Islands","Faroe Islands","Fiji","Finland","France","French Polynesia","French West Indies","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guam","Guatemala","Guernsey","Guinea","Guinea Bissau","Guyana","Haiti","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","Isle of Man","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Kosovo","Kuwait","Kyrgyzstan","Laos","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macau","Macedonia","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands","Mauritania","Mauritius","Mexico","Micronesia","Moldova","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauro","Nepal","Netherlands","Netherlands Antilles","New Caledonia","New Zealand","Nicaragua","Niger","Nigeria","North Korea","Norway","Oman","Pakistan","Palau","Palestine","Panama","Papua New Guinea","Paraguay","Peru","Philippines","Poland","Portugal","Puerto Rico","Qatar","Reunion","Romania","Russia","Rwanda","Saint Pierre & Miquelon","Samoa","San Marino","Sao Tome and Principe","Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Korea","South Sudan","Spain","Sri Lanka","St Kitts & Nevis","St Lucia","St Vincent","Sudan","Suriname","Swaziland","Sweden","Switzerland","Syria","Taiwan","Tajikistan","Tanzania","Thailand","Timor L'Este","Togo","Tonga","Trinidad & Tobago","Tunisia","Turkey","Turkmenistan","Turks & Caicos","Tuvalu","Uganda","Ukraine","United Arab Emirates","United Kingdom","United States of America","Uruguay","Uzbekistan","Vanuatu","Vatican City","Venezuela","Vietnam","Virgin Islands (US)","Yemen","Zambia","Zimbabwe"];

/*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
autocomplete(document.getElementById("myInput"), countries);
</script>


<form method="get">
    <div class="form-group">
        <label for="minPrezzo">Prezzo minimo</label>
        <input type="text" class="form-control" name="minPrezzo" />
    </div>
    <div class="form-group">
        <label for="maxPrezzo">Prezzo massimo</label>
        <input type="text" class="form-control" name="maxPrezzo" />
    </div>
    <br>
    <button type="submit" class="btn btn-primary"> Filtro</button>
</form>
<!--
<div class="grid-container">
    <div class="item3">Nome</div>
    <div class="item4">Prezzo</div>
@foreach (var prodotto in Model.Prodotti!)
{
                        <div>@prodotto.Nome</div>
                        <div>@prodotto.Prezzo $</div>
}
</div>
-->

<!--
@foreach (var prodotto in Model.Prodotti!)
{
                    <div class="card" style="width: 18rem;">
                        <div class="card-body">
                            <h5 class="card-title">@prodotto.Nome</h5>
                            <p class="card-prezzo">Prezzo: @prodotto.Prezzo $</p>
                        </div>
                    </div>
}
-->

<table class="table">
    <thead>
        <tr>
            <th>Nome</th>
            <th>Prezio</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var prodotto in Model.Prodotti!)
        {

            string color;
            string textC;
            string textSet;
            string set;
            if (prodotto.Prezzo < 100)
            {
                color = "rgba(0,0,255,0.3)";
                textC = "rgba(255,255,255,1)";
            }
            else if (prodotto.Prezzo < 301)
            {
                color = "rgba(255,228,196,0.8)";
                textC = "rgba(0,0,0,1)";
            }
            else
            {
                color = "rgba(255,0,0,0.3)";
                textC = "rgba(255,255,255,1)";
            }
            textC = "black";
            textSet = "color: " + textC + "; ";
            set = textSet + "background-color: " + color + "; border-color: " + color + ";";
            set = set.Replace(" ", "");
            <tr>
                <td id="prova01" style=@set>@prodotto.Nome</td>
                <td id="prova02" style=@set>@prodotto.Prezzo</td>
            </tr>
        }
    </tbody>
</table>


<div class="row">
    @foreach (var prodotto in Model.Prodotti!)
    {
        <div class="col-sm-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@prodotto.Nome</h5>
                    @{
                        string color = "bisque";
                        string textC = "black";
                        string textSet = "color:" + textC + ";";
                        string set = "border-color:" + color + ";background-color:" + color + ";" + textSet;
                        if (prodotto.Prezzo < 100)
                        {
                            color = "blue";
                            textC = "white";
                            textSet = "color: " + textC + ";";
                            set = "border-color: " + color + "; background-color: " + color + ";" + textSet;
                            set = set.Replace(" ", "");
                            <p class="card-prezzo">Prezzo: @prodotto.Prezzo $</p>
                            <a asp-page="Prodotto" asp-route-nome="@prodotto.Nome" asp-route-prezzo="@prodotto.Prezzo"
                                asp-route-dettaglio="@prodotto.Descrizione" class="btn btn-danger" style=@set> Dettaglio </a>
                        }
                        else if (prodotto.Prezzo < 301)
                        {
                            set = set.Replace(" ", "");
                            <p class="card-prezzo">Prezzo: @prodotto.Prezzo $</p>
                            <a asp-page="Prodotto" asp-route-nome="@prodotto.Nome" asp-route-prezzo="@prodotto.Prezzo"
                                asp-route-dettaglio="@prodotto.Descrizione" class="btn btn-danger" style=@set> Dettaglio </a>
                        }
                        else
                        {
                            color = "red";
                            textC = "white";
                            textSet = "color: " + textC + ";";
                            set = "border-color: " + color + "; background-color: " + color + ";" + textSet;
                            set = set.Replace(" ", "");
                            <p class="card-prezzo">Prezzo: @prodotto.Prezzo $</p>
                            //<!--basically, ya want to don't have to use all these asp-route-X, make a json to take from that instead of namig all of em-->
                            <a asp-page="Prodotto" asp-route-nome="@prodotto.Nome" asp-route-prezzo="@prodotto.Prezzo"
                                asp-route-dettaglio="@prodotto.Descrizione" class="btn btn-primary" style=@set> Dettaglio </a>
                        }
                    }
                </div>
            </div>
        </div>
    }
</div>
<!--how bout nogigognojnglskdnflkn-->
<form method="get">
    <input type="hidden" name="minPrezzo" value="@Request.Query["minPrezzo"]" />
    <input type="hidden" name="maxPrezzo" value="@Request.Query["maxPrezzo"]" />
    <button type="submit" class="btn btn-primary" name="pageIndex" value="1">1</button>
    <button type="submit" class="btn btn-primary" name="pageIndex" value="2">2</button>
    <button type="submit" class="btn btn-primary" name="pageIndex" value="3">3</button>
</form>


<p>Pagina prodotto</p>
